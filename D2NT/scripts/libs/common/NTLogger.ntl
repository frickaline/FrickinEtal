// Global log container
var _NTLG_LogList = new Array();
var _NTLG_ReassemblyList = new Array();

// Logger Message Types
const NTLG_TYPE_LOG = 0;
const NTLG_TYPE_ITEM = 1;

// Message Levels
const NTLG_LEVEL_DEBUG = 0;
const NTLG_LEVEL_INFO = 1;
const NTLG_LEVEL_WARN = 2;
const NTLG_LEVEL_ERROR = 3;
const NTLG_LEVEL_ITEM_WHITE = 0;
const NTLG_LEVEL_ITEM_MAGIC = 1;
const NTLG_LEVEL_ITEM_RARE = 2;
const NTLG_LEVEL_ITEM_CRAFT = 3;
const NTLG_LEVEL_ITEM_UNIQUE = 4;

// Delimeter - log msgs are of the format: ticks, type, level, msg separated by NTLG_DELIM
const NTLG_DELIM = "%"
const NTLG_DELIM_REPLACE = "percent"

// Log Queue size to never exceed
const NTLG_LOGLIMIT = 1000;

// Internal send to script buffer size
const maxbufferlength = 63;

function NTLG_Log (type, level, msg) {
	if (arguments.length > 3 || arguments.length == 2 || arguments.length < 1) {
		NTLG_Error(NTLG_TYPE_LOG, COLOR_1 + "NTLG: log message dropped, wrong arguments");
		return;
	}
	if (type != 0) return;
	date = new Date();
	ticks = date.getTime();
	if (arguments.length == 1) {
		level = 99;
		msg = "";
	}
	regex = new RegExp(NTLG_DELIM, "g");
	msg = msg.replace(regex, NTLG_DELIM_REPLACE);
	maxmsglength = maxbufferlength - (4 * String(NTLG_DELIM).length) - String(ticks).length - String(type).length - String(level).length - 1;
	while (msg.length > maxmsglength) {
		msgTrunc = msg.substr(0,maxmsglength);
		msgTrunc = msgTrunc.replace(/^\s+|\s+$/g, "");
		msg = msg.substr(maxmsglength);
		eom = "0";
		NTLG_LogEvent(ticks, type, level, msgTrunc, eom);
	}
	eom = "1";
	NTLG_LogEvent(ticks, type, level, msg, eom);
}

function NTLG_LogEvent(ticks, type, level, msg, eom) {
	logged = NTC_SendMsgToScript("NTLogHandler.ntj", ticks + NTLG_DELIM + type + NTLG_DELIM + level + NTLG_DELIM + msg + NTLG_DELIM + eom);
	if (!logged) NTLG_QueueLogEvent(ticks, type, level, msg, eom);
}

function NTLG_QueueLogEvent(ticks, type, level, msg, eom) {
	if (_NTLG_LogList.length > NTLG_LOGLIMIT) NTLG_FlushLogQueue();
	var _entry = new Array();
	_entry.push(eom);
	_entry.push(msg);
	_entry.push(level);
	_entry.push(type);
	_entry.push(ticks);
	_NTLG_LogList.push(_entry);
}

function NTLG_FlushLogQueue() {
	date = new Date();
	now = date.getTime();
	filename = "logs/Logger/" + me.account + "-" + me.charname + "-item.txt";
	NTLG_LogLine(filename, now, 3, "NTLG_FlushLogQueue: buffered length exceeds limit, flushing "+ _NTLG_LogList.length +" messages");
	for(i = 0 ; i < _NTLG_LogList.length ; i++) {
		ticks = _NTLG_LogList[i].pop();
		type = _NTLG_LogList[i].pop();
		level = _NTLG_LogList[i].pop();
		msg = _NTLG_LogList[i].pop();
		time = NTLG_TimeStamp(ticks);
		_NTLG_LogList.splice(i,1);
		NTLG_LogLine(filename, ticks, level, msg);
	}
}

function NTLG_LogLine(filename, ticks, level, message) {
	file = FileOpen(filename, 2);
	time = NTLG_TimeStamp(ticks);
	file.WriteLine(time + ": " + level + ": " + message);
	file.Close();
}

function NTLG_InitLog(filename, ticks) {
	file = FileOpen(filename, 2);
	time = NTLG_TimeStamp(ticks);
	if (file.size == 0) {
		SendCopyData("D2NT Manager", null, 9<<16, COLOR_2 + "NTLogHandler: Log Created: " + filename);
		file.WriteLine(time + ": 1: " + "Created");	
	}
	if (file.size > NTConfig_maxLogSize) {
		file.Close();
		SendCopyData("D2NT Manager", null, 9<<16, COLOR_1 + "NTLogHandler: Log Initialized: " + filename);
		file = FileOpen(filename, 1);
		file.WriteLine(time + ": 1: " + "Initialized");	
	}
	file.Close();
}

function NTLG_TimeStamp(ticks) {
	if (NTConfig_TwelveHourClock == 'undefined') var NTConfig_TwelveHourClock = false;
	var time = new Date();
	time.setTime(ticks);
	var hour   = time.getHours();
	var minute = time.getMinutes();
	var second = time.getSeconds();
	var millisecond = time.getMilliseconds();
	if (NTConfig_TwelveHourClock) {
		var DoN = "AM";
		if (hour > 11) { DoN = "PM"; }
		if (hour > 12) { hour = hour - 12; }
		if (hour == 0) { hour = 12; }
	}
	if (hour < 10) { hour = "0" + hour; }
	if (minute < 10) { minute = "0" + minute; }
	if (second < 10) { second = "0" + second; }
	if (String(millisecond).length == 2) { millisecond = millisecond + "0"; }
	if (String(millisecond).length == 1) { millisecond = millisecond + "00"; }
	if (NTConfig_TwelveHourClock)
		timeString = hour +	':' +  minute + ':' + second + '.' + millisecond + " " + DoN;
	else
		timeString = hour +	':' +  minute + ':' + second + '.' + millisecond;
	return timeString;
}

function NTLG_Error(type, msg) {
	SendCopyData("D2NT Manager", null, 9<<16|type, msg);
	return;
}

function NTLG_FormatAndLogLine(filename, ticks, level, message) {
	var color="0";
	if (message.match(/^ÿc/)) {
		color = message.substring(2).substring(0,1);
		message = message.substring(3);
	}
	if (color=="1") level = 3; else level = 1;
	NTLG_LogLine(filename, ticks, level, message);
}

function NTLG_QueueMsg(ticks,type,level,message) {
	var _entry = new Array();
	_entry.push(message);
	_entry.push(level);
	_entry.push(type);
	_entry.push(ticks);
	_NTLG_ReassemblyList.push(_entry);
}

function NTLG_UnqueueMsgs(ticks){
	var returnMsg = "";
	for (i = 0 ; i < _NTLG_ReassemblyList.length ; i++) {
		if (_NTLG_ReassemblyList[i][3] == ticks) {
			ticks = _NTLG_ReassemblyList[i].pop();
			type = _NTLG_ReassemblyList[i].pop();
			level = _NTLG_ReassemblyList[i].pop();
			msg = _NTLG_ReassemblyList[i].pop();
			_NTLG_ReassemblyList.splice(i,1);
			returnMsg = returnMsg + msg;
			NTLG_Error(0, COLOR_3+"Adding: "+msg);
		}
	}
	return returnMsg;
}
