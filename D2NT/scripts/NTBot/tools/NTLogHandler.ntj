// NTLogHandler.ntj

function NTMain() {
	Include("libs/common/NTCommon.ntl");
	NTC_IncludeLibs();
	NTC_IncludeConfig("NTBot/char_configs");
	NT_LoadConfig();
	
	if (NTConfig_LoggingEnabled) {
		Print(COLOR_4 + "LogHandler: " + COLOR_2 + " registered");
		RegisterEvent(EVENT_SCRIPTMSG, scriptMsgEvents);
	}
	while(1) {
		NTC_Delay(1000);
	}
}

// log msgs are of the format: ticks, type, level, msg, eom separated by NTLG_DELIM
function scriptMsgEvents(msg) {
    log = msg.split(NTLG_DELIM);
    if (log.length != 5) {
		NTLG_Error(NTLG_TYPE_LOG, COLOR_1 + "NTLogHandler: invalid log message dropped");
		NTLG_Error(NTLG_TYPE_LOG, COLOR_1 + "NTLogHandler: "+msg);
		return;
	} 
	ticks = parseInt(log[0]);
	type = parseInt(log[1]);
	level = parseInt(log[2]);
	message = log[3];
	eom = log[4];
	switch(type) {
		case NTLG_TYPE_LOG:
			if (level < NTConfig_Log_Level) return;
			filename = "logs/Logger/" + me.account + "-" + me.charloc + "-log.txt";
			break;
		case NTLG_TYPE_ITEM:
			if (level < NTConfig_Item_Level) return;
			filename = "logs/Logger/" + me.account + "-" + me.charloc + "-item.txt";
			break;
		default:
			NTLG_Error(NTLG_TYPE_LOG, COLOR_1 + "NTLogHandler: invalid log message (type) dropped");
	}
	NTLG_Error(NTLG_TYPE_LOG, "eom: "+eom);
	if (eom == "0") {
		NTLG_QueueMsg(ticks,type,level,message);
	} else {
		message = NTLG_UnqueueMsgs(ticks) + message;
	}
	if (message == "") {
		NTLG_InitLog(filename, ticks);
	} else {
		NTLG_FormatAndLogLine(filename, ticks, level, message);
	}
}



	